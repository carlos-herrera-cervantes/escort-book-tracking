// Code generated by MockGen. DO NOT EDIT.
// Source: escort-book-tracking/repositories (interfaces: IEscortTrackingRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "escort-book-tracking/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIEscortTrackingRepository is a mock of IEscortTrackingRepository interface.
type MockIEscortTrackingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIEscortTrackingRepositoryMockRecorder
}

// MockIEscortTrackingRepositoryMockRecorder is the mock recorder for MockIEscortTrackingRepository.
type MockIEscortTrackingRepositoryMockRecorder struct {
	mock *MockIEscortTrackingRepository
}

// NewMockIEscortTrackingRepository creates a new mock instance.
func NewMockIEscortTrackingRepository(ctrl *gomock.Controller) *MockIEscortTrackingRepository {
	mock := &MockIEscortTrackingRepository{ctrl: ctrl}
	mock.recorder = &MockIEscortTrackingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEscortTrackingRepository) EXPECT() *MockIEscortTrackingRepositoryMockRecorder {
	return m.recorder
}

// Acknowledge mocks base method.
func (m *MockIEscortTrackingRepository) Acknowledge(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Acknowledge", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Acknowledge indicates an expected call of Acknowledge.
func (mr *MockIEscortTrackingRepositoryMockRecorder) Acknowledge(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Acknowledge", reflect.TypeOf((*MockIEscortTrackingRepository)(nil).Acknowledge), arg0, arg1)
}

// AlterEscortTracking mocks base method.
func (m *MockIEscortTrackingRepository) AlterEscortTracking(arg0 context.Context, arg1 *models.EscortTracking) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlterEscortTracking", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AlterEscortTracking indicates an expected call of AlterEscortTracking.
func (mr *MockIEscortTrackingRepositoryMockRecorder) AlterEscortTracking(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlterEscortTracking", reflect.TypeOf((*MockIEscortTrackingRepository)(nil).AlterEscortTracking), arg0, arg1)
}

// CountEscortLocationByTerritory mocks base method.
func (m *MockIEscortTrackingRepository) CountEscortLocationByTerritory(arg0 context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountEscortLocationByTerritory", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountEscortLocationByTerritory indicates an expected call of CountEscortLocationByTerritory.
func (mr *MockIEscortTrackingRepositoryMockRecorder) CountEscortLocationByTerritory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountEscortLocationByTerritory", reflect.TypeOf((*MockIEscortTrackingRepository)(nil).CountEscortLocationByTerritory), arg0)
}

// GetEscortLocationByTerritory mocks base method.
func (m *MockIEscortTrackingRepository) GetEscortLocationByTerritory(arg0 context.Context, arg1 string, arg2, arg3 int) ([]models.EscortTracking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEscortLocationByTerritory", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]models.EscortTracking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEscortLocationByTerritory indicates an expected call of GetEscortLocationByTerritory.
func (mr *MockIEscortTrackingRepositoryMockRecorder) GetEscortLocationByTerritory(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEscortLocationByTerritory", reflect.TypeOf((*MockIEscortTrackingRepository)(nil).GetEscortLocationByTerritory), arg0, arg1, arg2, arg3)
}

// GetEscortTracking mocks base method.
func (m *MockIEscortTrackingRepository) GetEscortTracking(arg0 context.Context, arg1 string) (*models.EscortTracking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEscortTracking", arg0, arg1)
	ret0, _ := ret[0].(*models.EscortTracking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEscortTracking indicates an expected call of GetEscortTracking.
func (mr *MockIEscortTrackingRepositoryMockRecorder) GetEscortTracking(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEscortTracking", reflect.TypeOf((*MockIEscortTrackingRepository)(nil).GetEscortTracking), arg0, arg1)
}
