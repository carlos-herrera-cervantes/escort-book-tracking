// Code generated by MockGen. DO NOT EDIT.
// Source: escort-book-tracking/repositories (interfaces: ICustomerTrackingRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "escort-book-tracking/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockICustomerTrackingRepository is a mock of ICustomerTrackingRepository interface.
type MockICustomerTrackingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICustomerTrackingRepositoryMockRecorder
}

// MockICustomerTrackingRepositoryMockRecorder is the mock recorder for MockICustomerTrackingRepository.
type MockICustomerTrackingRepositoryMockRecorder struct {
	mock *MockICustomerTrackingRepository
}

// NewMockICustomerTrackingRepository creates a new mock instance.
func NewMockICustomerTrackingRepository(ctrl *gomock.Controller) *MockICustomerTrackingRepository {
	mock := &MockICustomerTrackingRepository{ctrl: ctrl}
	mock.recorder = &MockICustomerTrackingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICustomerTrackingRepository) EXPECT() *MockICustomerTrackingRepositoryMockRecorder {
	return m.recorder
}

// Acknowledge mocks base method.
func (m *MockICustomerTrackingRepository) Acknowledge(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Acknowledge", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Acknowledge indicates an expected call of Acknowledge.
func (mr *MockICustomerTrackingRepositoryMockRecorder) Acknowledge(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Acknowledge", reflect.TypeOf((*MockICustomerTrackingRepository)(nil).Acknowledge), arg0, arg1)
}

// AlterCustomerTracking mocks base method.
func (m *MockICustomerTrackingRepository) AlterCustomerTracking(arg0 context.Context, arg1 *models.CustomerTracking) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlterCustomerTracking", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AlterCustomerTracking indicates an expected call of AlterCustomerTracking.
func (mr *MockICustomerTrackingRepositoryMockRecorder) AlterCustomerTracking(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlterCustomerTracking", reflect.TypeOf((*MockICustomerTrackingRepository)(nil).AlterCustomerTracking), arg0, arg1)
}

// GetCustomerTracking mocks base method.
func (m *MockICustomerTrackingRepository) GetCustomerTracking(arg0 context.Context, arg1 string) (*models.CustomerTracking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerTracking", arg0, arg1)
	ret0, _ := ret[0].(*models.CustomerTracking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerTracking indicates an expected call of GetCustomerTracking.
func (mr *MockICustomerTrackingRepositoryMockRecorder) GetCustomerTracking(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerTracking", reflect.TypeOf((*MockICustomerTrackingRepository)(nil).GetCustomerTracking), arg0, arg1)
}
